from src.plot_monte_carlos import get_years_to_process
from src.plot_monte_carlos import get_taxable_breakdown
from src.plot_monte_carlos import summarize_tax_data
from src.account import Account
from src.owner import Owner
import pandas as pd


def test_get_years_to_process():
    owners = []
    owners.append(Owner({
        "Name": "Jill",
        "Year of Birth": 1990,
        "Retirement Age": 65,
        "Life Expectancy": 99,
    }))
    owners.append(Owner({
        "Name": "Jerry",
        "Year of Birth": 1980,
        "Retirement Age": 65,
        "Life Expectancy": 95,
    }))

    assert get_years_to_process(start_year=2024, owners=owners) \
        == [2024, 2046, 2056, 2076, 2090]


def test_get_years_to_process_should_not_have_duplicates():
    owners = []
    owners.append(Owner({
        "Name": "Jill",
        "Year of Birth": 1990,
        "Retirement Age": 55,
        "Life Expectancy": 99,
    }))
    owners.append(Owner({
        "Name": "Jerry",
        "Year of Birth": 1980,
        "Retirement Age": 65,
        "Life Expectancy": 95,
    }))

    assert get_years_to_process(start_year=2024, owners=owners) \
        == [2024, 2046, 2076, 2090]


def test_can_find_breakdown_of_account_types_in_a_year():
    configs = [
        {
            "Name": "Account A",
            "Type": "Investment",
            "Balance": 4000
        },
        {
            "Name": "Account B",
            "Type": "Investment",
            "Balance": 4000
        },
        {
            "Name": "Account C",
            "Type": "Roth",
            "Balance": 4000
        },
        {
            "Name": "Account D",
            "Type": "HSA",
            "Balance": 4000
        },
        {
            "Name": "Account E",
            "Type": "IRA",
            "Balance": 4000
        },
        {
            "Name": "Account F",
            "Type": "401K",
            "Balance": 4000
        }]
    accounts = [Account(account_data) for account_data in configs]

    data = {
        'Year': [2024.0, 2025.0, 2026.0, 2027.0, 2028.0, 2029.0, 2030.0, 2031.0, 2032.0, 2033.0, 2034.0, 2035.0, 2036.0, 2037.0, 2038.0, 2039.0, 2040.0, 2041.0, 2042.0, 2043.0, 2044.0, 2045.0, 2046.0, 2047.0, 2048.0, 2049.0, 2050.0, 2051.0, 2052.0, 2053.0, 2054.0, 2055.0, 2056.0, 2057.0, 2058.0, 2059.0, 2060.0, 2061.0],
        'Stock Returns': [5.795513, 1.596987, 4.294004, -3.918511, 8.53689, 10.866337, 8.810764, 10.198383, 8.208658, 11.679257, 1.023175, 8.878902, 9.521114, 19.853594, 2.433106, 11.2017, 11.57823, 11.841573, 11.731946, 5.277518, 7.866822, 1.003595, 2.790605, 9.735412, 16.326455, 2.596655, 4.774264, 7.993991, -11.447618, 14.212101, 9.363131, 18.380104, 12.813231, 1.514255, 12.759795, 10.428054, 3.345354, 13.112571],
        'Bond Returns': [3.976546, 2.135774, 2.852935, 3.312437, 2.938082, 1.905118, -0.456958, 3.313519, 5.19453, -1.704961, 3.031121, 3.014675, 3.758806, 5.319025, 5.887935, -0.79834, 5.281341, -1.409117, -1.26994, 3.861282, 3.277203, 1.783273, 4.281856, -1.65021, 1.744608, 3.494776, -1.241751, 1.754831, -1.774446, 6.470727, 2.773718, 3.082532, 4.200546, -1.8963, 4.163624, 1.709548, 6.879364, 5.888054],
        'Income': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        'Rmd': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        'Expenses': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        'Taxes': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        'Reinvested': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        'Account A': [100.0, 101.6, 105.96, 101.81, 110.5, 122.51, 133.3, 146.89, 158.95, 177.51, 179.33, 195.25, 213.84, 256.29, 262.53, 291.94, 325.74, 364.31, 407.05, 428.53, 462.24, 466.88, 479.91, 526.63, 612.61, 628.52, 658.53, 711.17, 629.76, 719.26, 786.61, 931.19, 1026.65, 1039.05, 1144.77, 1239.67, 1272.55, 1404.73],
        'Account B': [100.0, 101.6, 105.96, 101.81, 110.5, 122.51, 133.3, 146.89, 158.95, 177.51, 179.33, 195.25, 213.84, 256.29, 262.53, 291.94, 325.74, 364.31, 407.05, 428.53, 462.24, 466.88, 479.91, 526.63, 612.61, 628.52, 658.53, 711.17, 629.76, 719.26, 786.61, 931.19, 1026.65, 1039.05, 1144.77, 1239.67, 1272.55, 1404.73],
        'Account C': [200.0, 203.19, 211.91, 203.61, 220.99, 245.0, 266.59, 293.78, 317.9, 355.03, 358.66, 390.51, 427.69, 512.6, 525.07, 583.89, 651.49, 728.64, 814.12, 857.09, 924.52, 933.8, 959.86, 1053.31, 1225.28, 1257.1, 1317.12, 1422.41, 1259.58, 1438.59, 1573.29, 1862.46, 2101.1, 2132.92, 2405.08, 2655.88, 2744.73, 0],
        'Account D': [200.0, 203.19, 211.91, 203.61, 220.99, 245.0, 266.59, 293.78, 317.9, 355.03, 358.66, 390.51, 427.69, 512.6, 525.07, 583.89, 651.49, 728.64, 814.12, 857.09, 924.52, 933.8, 959.86, 1053.31, 1225.28, 1257.1, 1317.12, 1422.41, 1259.58, 1438.59, 1573.29, 1862.46, 2101.1, 2132.92, 2405.08, 2655.88, 2744.73, 0],
        'Account E': [400.0, 406.39, 423.84, 407.23, 441.99, 490.02, 533.19, 587.57, 635.8, 710.06, 717.33, 781.02, 855.38, 1025.2, 1050.14, 1167.77, 1302.98, 1457.27, 1628.24, 1714.17, 1849.02, 1867.58, 1919.7, 2106.59, 2450.52, 2514.15, 2634.18, 2844.76, 2519.1, 2877.12, 3146.51, 3724.84, 4202.11, 4265.74, 4810.04, 5311.63, 5489.32, 0],
        'Account F': [400.0, 406.39, 423.84, 407.23, 441.99, 490.02, 533.19, 587.57, 635.8, 710.06, 717.33, 781.02, 855.38, 1025.2, 1050.14, 1167.77, 1302.98, 1457.27, 1628.24, 1714.17, 1849.02, 1867.58, 1919.7, 2106.59, 2450.52, 2514.15, 2634.18, 2844.76, 2519.1, 2877.12, 3146.51, 3724.84, 4202.11, 4265.74, 4810.04, 5311.63, 5489.32, 0],
        '% Withdrawn': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        'Sum of Accounts': [1400.0, 1422.36, 1483.42, 1425.3, 1546.96, 1715.06, 1866.16, 2056.48, 2225.3, 2485.2, 2510.64, 2733.56, 2993.82, 3588.18, 3675.48, 4087.2, 4560.42, 5100.44, 5698.82, 5999.58, 6471.56, 6536.52, 6718.94, 7373.06, 8576.82, 8799.54, 9219.66, 9956.68, 8816.88, 10069.94, 11012.82, 13036.98, 14683.58, 14902.79, 16777.5, 18502.58, 19112.96, 21584.47]
    }
    df = pd.DataFrame(data)

    taxable, tax_deferred, tax_free = get_taxable_breakdown(2024, df, accounts)

    assert taxable == 200
    assert tax_deferred == 800
    assert tax_free == 400


def test_can_find_breakdown_of_account_types_in_several_years():
    configs = [
        {
            "Name": "Account A",
            "Type": "Investment",
            "Balance": 4000
        },
        {
            "Name": "Account B",
            "Type": "Investment",
            "Balance": 4000
        },
        {
            "Name": "Account C",
            "Type": "Roth",
            "Balance": 4000
        },
        {
            "Name": "Account D",
            "Type": "HSA",
            "Balance": 4000
        },
        {
            "Name": "Account E",
            "Type": "IRA",
            "Balance": 4000
        },
        {
            "Name": "Account F",
            "Type": "401K",
            "Balance": 4000
        }]
    accounts = [Account(account_data) for account_data in configs]

    data = {
        'Year': [2024.0, 2025.0, 2026.0, 2027.0, 2028.0, 2029.0, 2030.0, 2031.0, 2032.0, 2033.0, 2034.0, 2035.0, 2036.0, 2037.0, 2038.0, 2039.0, 2040.0, 2041.0, 2042.0, 2043.0, 2044.0, 2045.0, 2046.0, 2047.0, 2048.0, 2049.0, 2050.0, 2051.0, 2052.0, 2053.0, 2054.0, 2055.0, 2056.0, 2057.0, 2058.0, 2059.0, 2060.0, 2061.0],
        'Stock Returns': [5.795513, 1.596987, 4.294004, -3.918511, 8.53689, 10.866337, 8.810764, 10.198383, 8.208658, 11.679257, 1.023175, 8.878902, 9.521114, 19.853594, 2.433106, 11.2017, 11.57823, 11.841573, 11.731946, 5.277518, 7.866822, 1.003595, 2.790605, 9.735412, 16.326455, 2.596655, 4.774264, 7.993991, -11.447618, 14.212101, 9.363131, 18.380104, 12.813231, 1.514255, 12.759795, 10.428054, 3.345354, 13.112571],
        'Bond Returns': [3.976546, 2.135774, 2.852935, 3.312437, 2.938082, 1.905118, -0.456958, 3.313519, 5.19453, -1.704961, 3.031121, 3.014675, 3.758806, 5.319025, 5.887935, -0.79834, 5.281341, -1.409117, -1.26994, 3.861282, 3.277203, 1.783273, 4.281856, -1.65021, 1.744608, 3.494776, -1.241751, 1.754831, -1.774446, 6.470727, 2.773718, 3.082532, 4.200546, -1.8963, 4.163624, 1.709548, 6.879364, 5.888054],
        'Income': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        'Rmd': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        'Expenses': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        'Taxes': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        'Reinvested': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        'Account A': [100.0, 101.6, 105.96, 101.81, 110.5, 122.51, 133.3, 146.89, 158.95, 177.51, 179.33, 195.25, 213.84, 256.29, 262.53, 291.94, 325.74, 364.31, 407.05, 428.53, 462.24, 466.88, 479.91, 526.63, 612.61, 628.52, 658.53, 711.17, 629.76, 719.26, 786.61, 931.19, 1026.65, 1039.05, 1144.77, 1239.67, 1272.55, 1404.73],
        'Account B': [100.0, 101.6, 105.96, 101.81, 110.5, 122.51, 133.3, 146.89, 158.95, 177.51, 179.33, 195.25, 213.84, 256.29, 262.53, 291.94, 325.74, 364.31, 407.05, 428.53, 462.24, 466.88, 479.91, 526.63, 612.61, 628.52, 658.53, 711.17, 629.76, 719.26, 786.61, 931.19, 1026.65, 1039.05, 1144.77, 1239.67, 1272.55, 1404.73],
        'Account C': [200.0, 203.19, 211.91, 203.61, 220.99, 245.0, 266.59, 293.78, 317.9, 355.03, 358.66, 390.51, 427.69, 512.6, 525.07, 583.89, 651.49, 728.64, 814.12, 857.09, 924.52, 933.8, 959.86, 1053.31, 1225.28, 1257.1, 1317.12, 1422.41, 1259.58, 1438.59, 1573.29, 1862.46, 2101.1, 2132.92, 2405.08, 2655.88, 2744.73, 0],
        'Account D': [200.0, 203.19, 211.91, 203.61, 220.99, 245.0, 266.59, 293.78, 317.9, 355.03, 358.66, 390.51, 427.69, 512.6, 525.07, 583.89, 651.49, 728.64, 814.12, 857.09, 924.52, 933.8, 959.86, 1053.31, 1225.28, 1257.1, 1317.12, 1422.41, 1259.58, 1438.59, 1573.29, 1862.46, 2101.1, 2132.92, 2405.08, 2655.88, 2744.73, 0],
        'Account E': [400.0, 406.39, 423.84, 407.23, 441.99, 490.02, 533.19, 587.57, 635.8, 710.06, 717.33, 781.02, 855.38, 1025.2, 1050.14, 1167.77, 1302.98, 1457.27, 1628.24, 1714.17, 1849.02, 1867.58, 1919.7, 2106.59, 2450.52, 2514.15, 2634.18, 2844.76, 2519.1, 2877.12, 3146.51, 3724.84, 4202.11, 4265.74, 4810.04, 5311.63, 5489.32, 0],
        'Account F': [400.0, 406.39, 423.84, 407.23, 441.99, 490.02, 533.19, 587.57, 635.8, 710.06, 717.33, 781.02, 855.38, 1025.2, 1050.14, 1167.77, 1302.98, 1457.27, 1628.24, 1714.17, 1849.02, 1867.58, 1919.7, 2106.59, 2450.52, 2514.15, 2634.18, 2844.76, 2519.1, 2877.12, 3146.51, 3724.84, 4202.11, 4265.74, 4810.04, 5311.63, 5489.32, 0],
        '% Withdrawn': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        'Sum of Accounts': [1400.0, 1422.36, 1483.42, 1425.3, 1546.96, 1715.06, 1866.16, 2056.48, 2225.3, 2485.2, 2510.64, 2733.56, 2993.82, 3588.18, 3675.48, 4087.2, 4560.42, 5100.44, 5698.82, 5999.58, 6471.56, 6536.52, 6718.94, 7373.06, 8576.82, 8799.54, 9219.66, 9956.68, 8816.88, 10069.94, 11012.82, 13036.98, 14683.58, 14902.79, 16777.5, 18502.58, 19112.96, 21584.47]
    }
    df = pd.DataFrame(data)
    owners = []
    owners.append(Owner({
        "Name": "Jill",
        "Year of Birth": 2010,
        "Retirement Age": 25,
        "Life Expectancy": 30,
    }))
    owners.append(Owner({
        "Name": "Jerry",
        "Year of Birth": 2020,
        "Retirement Age": 35,
        "Life Expectancy": 40,
    }))

    data_expected = {
        'Year': [2024.0, 2036.0, 2041.0, 2056.0, 2061.0],
        'Taxable': [200, 427.68, 728.62, 2053.30, 2809.46],
        'Tax Deferred': [800, 1710.76, 2914.54, 8404.22, 0],
        'Tax Sheltered': [400, 855.38, 1457.28, 4202.20, 0],
        'Total': [1400, 2993.82, 5100.44, 14659.72, 2809.46]
    }
    df_expected = pd.DataFrame(data_expected)

    result = summarize_tax_data(df, owners, accounts)
    assert result.equals(df_expected)
